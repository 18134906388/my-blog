(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{405:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面试遇到的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试遇到的问题"}},[t._v("#")]),t._v(" 面试遇到的问题")]),t._v(" "),a("h2",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v('一个URL由 协议 IP 端口组成，如果这两个URL这三部分都相同，那么我们认为这两个URL同源，同源策略是浏览器为了防止来自不同源的"document"或脚本对当前"document"读取或设置某些属性。')]),t._v(" "),a("p",[a("code",[t._v("<script>、<img>、<iframe>、<link>")]),t._v("这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。")]),t._v(" "),a("h2",{attrs:{id:"跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),a("p",[t._v("跨域是指从一个域的网页去请求另一个域的资源。比如从http://www.baidu.com/ 页面去请求 http://www.google.com 的资源。跨域目前有很多方式：")]),t._v(" "),a("h3",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),a("p",[t._v("由于 script 标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以通过动态创建 script 标签，然后利用 src 属性进行跨域，这也就是 JSONP 跨域的基本原理。")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 定义一个 回调函数 handleResponse 用来接收返回的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'body'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gerElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.laixiangran.cn/json?callback=handleResponse'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbody"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 通过 script.src 请求 `http://www.laixiangran.cn/json?callback=handleResponse`，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 4. 后端能够识别这样的 URL 格式并处理该请求，然后返回 handleResponse({"name": "laixiangran"}) 给浏览器')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 5. 浏览器在接收到 handleResponse({"name": "laixiangran"}) 之后立即执行 ，也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了。')]),t._v("\n")])])]),a("p",[t._v("JSONP有一些缺点")]),t._v(" "),a("ul",[a("li",[t._v("只能执行get请求")]),t._v(" "),a("li",[t._v("由于是从其它域中加载代码执行，因此如果其他域不安全，很可能会在响应中夹带一些恶意代码。")]),t._v(" "),a("li",[t._v("要确定 JSONP 请求是否失败并不容易。虽然 HTML5 给 script 标签新增了一个 onerror 事件处理程序，但是存在兼容性问题。")])]),t._v(" "),a("h3",{attrs:{id:"cors-跨域资源共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-跨域资源共享"}},[t._v("#")]),t._v(" CORS（跨域资源共享）")]),t._v(" "),a("p",[t._v("CORS（Cross-origin resource sharing，跨域资源共享）是一个 W3C 标准，定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。CORS 背后的基本思想，就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。")]),t._v(" "),a("p",[t._v("CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。")]),t._v(" "),a("p",[t._v("整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。")]),t._v(" "),a("p",[t._v("因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。")]),t._v(" "),a("p",[t._v("具体实现可以阅读下面两位老师的博客http://www.cnblogs.com/laixiangran/p/9064769.html 和 http://www.cnblogs.com/tanghaiyang/p/4375601.html")]),t._v(" "),a("p",[t._v("CORS的缺点")]),t._v(" "),a("ul",[a("li",[t._v("兼容性差，不支持IE10一下的浏览器")]),t._v(" "),a("li",[t._v("第一次发送非简单请求的时候会多发送一次")])]),t._v(" "),a("h3",{attrs:{id:"webpack配置反向代理进行跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack配置反向代理进行跨域"}},[t._v("#")]),t._v(" webpack配置反向代理进行跨域")]),t._v(" "),a("p",[t._v("先解释一下反向代理：反向代理是指服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在。\n我们从前端浏览器发送请求到后端服务器可能因为IP、端口等引起跨域问题，这时我们通过前端服务器代理请求，向后端服务器发起请求，最后向浏览器返回数据，我们可以通过设置webpack的proxy配置反向代理。具体实现可以下下面两个老师的博客http://www.php.cn/js-tutorial-401620.html 和 https://blog.csdn.net/charismajae/article/details/82344995")]),t._v(" "),a("h2",{attrs:{id:"csrf-跨域伪造请求攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-跨域伪造请求攻击"}},[t._v("#")]),t._v(" CSRF（跨域伪造请求攻击）")]),t._v(" "),a("p",[t._v("简单来说就是攻击者盗用用户的身份，去发送一些恶意请求。要完成这样的攻击有一个必要条件，首先是用户要同时登陆受信任网站A，并在本地生成COOKIE，在COOKIE还没有失效前访问了和非法网站B。")]),t._v(" "),a("p",[t._v("在业界目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。下面就分别对这三种策略进行详细介绍。（我老东家主要使用第三种方式进行防御）")]),t._v(" "),a("p",[t._v("在 HTTP 头中自定义属性并验证")]),t._v(" "),a("ul",[a("li",[t._v("用户成功登陆信任网站A，网站A下发一个csrf-token，保持在浏览器cookie中")]),t._v(" "),a("li",[t._v("网站A在每一次请求头中都带上cookie中的csrf-token，如 CSRF-TOKEN: csrf-toke")]),t._v(" "),a("li",[t._v("用户登录非法网站B，攻击者只能借用网站A的cookie，但是不知道cookie的内容，无法在请求头中伪造CSRF-TOKEN的值")]),t._v(" "),a("li",[t._v("服务器可以通过鉴别请求头中的参数去判断请求的合法性。")])]),t._v(" "),a("p",[t._v("其他两种防御方式可以具体看https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html")])])}),[],!1,null,null,null);s.default=e.exports}}]);